{"text" : "All functions are defined over a specified domain and return values within a specified range.Whenever an argument is outside a functions domain, the function will return a missing value or issue an error message, whichever is most appropriate. For example, if you supplied the log() function with an argument of zero, the log(0) would return a missing value because zero is outside the natural logarithm functions domain. If you supplied the log() function with a string argument, Stata would issue a “type mismatch” error because log() is a numerical function and is undefined for strings. If you supply an argument that evaluates to a value that is outside the functions range, the function will return a missing value. Whenever a function accepts a string as an argument, the string must be enclosed in double quotes, unless you provide the name of a variable that has a string storage type.Continuing with the multinomial outcome case: the outcome variable must be numeric. The syntaxdispl would be understood only if there were a value label associated with the numericoutcome variable and res were one of the labels. If your data are not labeled, then you can use theusual multiple-equation syntax [##]varname and [##] se[varname] to refer to the coefficient andstandard error for variable varname in the #th equation.For mlogit, if your data are not labeled, you can also use the syntax [#]varname and[#] se[varname] (without the #) to refer to the coefficient and standard error for varnamein the equation for outcome #If we want to use the coefficient for level 2 of group in an expression, we type b[2.group]; forlevel 3, we type b[3.group]. To refer to the coefficient of an interaction of two levels of two factorvariables, we specify the interaction operator and the level of each variable. For example, to use thecoefficient for sex = 1 (female) and group = 2, we type b[1.sex#2.group]. (We determinedthat 1 was the level corresponding to female by typing label list.) When one of the variables inan interaction is continuous, we can make that explicit, b[1.sex#c.age], or we can leave off thec., b[1.sex#age].Referring to interactions is more challenging than referring to normal variables. It is also morechallenging to refer to coefficients from estimators that use multiple equations. If you find it difficultto know what to type for a coefficient, replay your estimation results using the coeflegend option.The number 1.1 in binary form is 1.000110011001 , where the period represents the binarypoint. The problem binary computers have with storing numbers like 1/10 is much like the problemwe base-10 users have in precisely writing 1/11, which is 0.0909090909 . . . .For detailed information about precision on binary computers and how Stata stores binary floating-point numbers, see Gould (2011a).The number that appears as 1.1 in the listing above is actually 1.1000000238419, which is off byroughly 2 parts in 108. Unless we tell Stata otherwise, it stores all numbers as floats, which are alsoknown as single-precision or 4-byte reals. On the other hand, Stata performs all internal calculationsin doubles, which are also known as double-precision or 8-byte reals. This is what leads to thedifficulty.In the above example, we compared the number 1.1, stored as a float, with the number 1.1 storedas a double. The double-precision representation of 1.1 is more accurate than the single-precisionrepresentation, but it is also different. Those two numbers are not equal.There are several ways around this problem. The problem with 1.1 apparently not equaling 1.1would never arise if the storage precision and the precision of the internal calculations were the same.Thus you could store all your data as doubles. This takes more computer memory, however, and itis unlikely that your data are really that accurate and the extra digits would meaningfully affect anycalculated result, even if the data were that accurate.If we had typed count if y==float(1.1) in the above example, we would have been informedthat there is one such value.An ado-file defines a Stata command, but not all Stata commands are defined by ado-files. When you type summarize to obtain summary statistics, you are using a command built into Stata.When you type ci to obtain confidence intervals, you are running an ado-file. The results of usinga built-in command or an ado-file are indistinguishable.An ado-file is a text file that contains a Stata program. When you type a command that Stata doesnot know, it looks in certain places for an ado-file of that name. If Stata finds it, Stata loads andexecutes it, so it appears to you as if the ado-command is just another command built into Stata.We just told you that Statas ci command is implemented as an ado-file. That means that,somewhere, there is a file named ci.ado.Ado-files usually come with help files. When you type help ci (or select Help > Stata command...,and type ci), Stata looks for ci.sthlp, just as it looks for ci.ado when you use the ci command.A help file is also a text file that tells Statas help system what to display","rules" : [{"text" : "if you supplied the log() function with an argument of zero, the log(0) would return a missing value", "condition" : " you supplied the log() function with an argument of zero", "consequence" : "the log(0) would return a missing value","action" : ""}, {"text" : "If you supplied the log() function with a string argument, Stata would issue a “type mismatch” error", "condition" : "you supplied the log() function with a string argument", "consequence" : "Stata would issue a “type mismatch” error","action" : ""}, {"text" : "If you supply an argument that evaluates to a value that is outside the functions range, the function will return a missing value", "condition" : "you supply an argument that evaluates to a value that is outside the functions range", "consequence" : "the function will return a missing value","action" : ""}, {"text" : "The syntax", "condition" : "The syntax", "consequence" : "","action" : ""}, {"text" : "displ would be understood only if there were a value label associated with the numeric", "condition" : "displ would be understood ", "consequence" : "there were a value label associated with the numeric","action" : ""}, {"text" : "outcome variable and res were one of the labels", "condition" : "", "consequence" : "outcome variable and res were one of the labels","action" : ""}, {"text" : "If your data are not labeled, then you can use the", "condition" : "your data are not labeled", "consequence" : "you can use the","action" : ""}, {"text" : "standard error for variable varname in the #th equation", "condition" : "", "consequence" : "standard error for variable varname in the #th equation","action" : ""}, {"text" : "if your data are not labeled, you can also use the syntax [#]varname and", "condition" : "your data are not labeled", "consequence" : "you can also use the syntax [#]varname and","action" : ""}, {"text" : "If we want to use the coefficient for level 2 of group in an expression, we type b[2.group]", "condition" : "we want to use the coefficient for level 2 of group in an expression", "consequence" : "we type b[2.group]","action" : ""}, {"text" : "for", "condition" : "for", "consequence" : "","action" : ""}, {"text" : "level 3, we type b[3.group]", "condition" : "level 3", "consequence" : "we type b[3.group]","action" : ""}, {"text" : "If you find it difficult", "condition" : "If you find it difficult", "consequence" : "","action" : ""}, {"text" : "to know what to type for a coefficient, replay your estimation results using the coeflegend option", "condition" : "to know what to type for a coefficient", "consequence" : "replay your estimation results using the coeflegend option","action" : ""}, {"text" : "Unless we tell Stata otherwise, it stores all numbers as floats", "condition" : "Unless we tell Stata otherwise", "consequence" : "it stores all numbers as floats","action" : ""}, {"text" : "If we had typed count if y==float(1.1) in the above example, we would have been informed", "condition" : "we had typed count if y==float(1.1) in the above example", "consequence" : "we would have been informed","action" : ""}, {"text" : "that there is one such value", "condition" : "", "consequence" : "that there is one such value","action" : ""}, {"text" : "When you type a command that Stata does", "condition" : "you type a command that Stata does", "consequence" : "","action" : ""}, {"text" : "not know, it looks in certain places for an ado-file of that name", "condition" : "not know", "consequence" : "it looks in certain places for an ado-file of that name","action" : ""}, {"text" : "If Stata finds it, Stata loads and", "condition" : "Stata finds it", "consequence" : "Stata loads and","action" : ""}, {"text" : "executes it", "condition" : "", "consequence" : "executes it","action" : ""}, {"text" : "When you type help ci (or select Help > Stata command...,", "condition" : "you type help ci (or select Help > Stata command...,", "consequence" : "","action" : ""}, {"text" : "and type ci), Stata looks for ci.sthlp", "condition" : "and type ci)", "consequence" : "Stata looks for ci.sthlp","action" : ""}, {"text" : "it looks for ci.ado when you use the ci command", "condition" : "you use the ci command", "consequence" : "it looks for ci.ado","action" : ""}]}